### This file was generated by Nexus Schema
### Do not make changes to this file directly

type CMSUser {
  accessLevel: String!
  birthDate: String
  contactNumber: String
  country: String
  createdAt: Float
  displayName: String!
  email: String!
  firstName: String!
  id: ID
  invitedBy: String!
  jobTitle: String
  lastName: String!
  name: String
  profilePhotoID: String
  slug: String!
  uid: String!
  updatedAt: Float
}

type CMSUsers {
  count: Int
  items: [CMSUser!]
  next: String
  total: Int
}

type Channel {
  Livestream: Livestream
  channelGroupID: String!
  createdAt: Float
  description: String
  id: ID
  livestreamID: String
  lockerRoomID: String!
  name: String!
  slug: String!
  type: String!
  updatedAt: Float
}

type ChannelGroup {
  Channels: [Channel]
  createdAt: Float
  description: String
  group: String!
  id: ID
  lockerRoomID: String!
  name: String!
  slug: String!
  updatedAt: Float
  withLivestream: Boolean
}

type ChannelGroups {
  count: Int
  items: [ChannelGroup!]
  next: String
  total: Int
}

type Channels {
  count: Int
  items: [Channel!]
  next: String
  total: Int
}

type Club {
  Avatar: Media
  CoverPhoto: Media
  League: League
  LockerRoom: LockerRoom
  Sports: [Sport!]
  createdAt: Float
  id: ID
  isFeatured: Boolean
  leagueID: String
  name: String!
  slug: String!
  sportIDs: [String!]!
  updatedAt: Float
}

type Clubs {
  count: Int
  items: [Club!]
  next: String
  total: Int
}

type FanGroup {
  Avatar: Media
  CoverPhoto: Media
  LockerRoom: LockerRoom
  Sports: [Sport!]
  createdAt: Float
  id: ID
  name: String!
  slug: String!
  sportIDs: [String!]!
  updatedAt: Float
}

type FanGroups {
  count: Int
  items: [FanGroup!]
  next: String
  total: Int
}

type GamePartner {
  Icon: Media
  id: ID
  isHidden: Boolean
  name: String!
  slug: String!
}

type GamePartners {
  count: Int
  items: [GamePartner!]
  next: String
  total: Int
}

type InHouse {
  Avatar: Media
  CoverPhoto: Media
  LockerRoom: LockerRoom
  Sports: [Sport!]
  createdAt: Float
  id: ID
  name: String!
  slug: String!
  sportIDs: [String!]!
  updatedAt: Float
}

type InHouses {
  count: Int
  items: [InHouse!]
  next: String
  total: Int
}

input InputClub {
  Avatar: InputMedia
  CoverPhoto: InputMedia
  isFeatured: Boolean
  leagueID: String!
  name: String!
  sportIDs: [String!]!
}

input InputCreateCMSUser {
  accessLevel: String!
  birthDate: String
  contactNumber: String
  country: String
  displayName: String!
  email: String!
  firstName: String!
  jobTitle: String
  lastName: String!
  password: String!
  profilePhotoID: String
}

input InputEditCMSUserProfile {
  birthDate: String
  contactNumber: String
  country: String
  displayName: String!
  firstName: String!
  jobTitle: String
  lastName: String!
  profilePhotoID: String
}

input InputFanGroup {
  Avatar: InputMedia
  CoverPhoto: InputMedia
  name: String!
  sportIDs: [String!]!
}

input InputGamePartner {
  Icon: InputMedia
  isHidden: Boolean
  name: String!
}

input InputInHouse {
  Avatar: InputMedia
  CoverPhoto: InputMedia
  name: String!
  sportIDs: [String!]!
}

input InputLeague {
  Avatar: InputMedia
  CoverPhoto: InputMedia
  name: String!
  sportIDs: [String!]!
}

input InputLivestream {
  link: String!
  source: String!
  startDate: String
  timezone: String
  title: String!
}

input InputMedia {
  objectID: String!
  objectType: String!
}

input InputSport {
  Avatar: InputMedia!
  CoverPhoto: InputMedia!
  Icon: InputMedia
  isHidden: Boolean
  name: String!
  status: String
}

type League {
  Avatar: Media
  CoverPhoto: Media
  LockerRoom: LockerRoom
  Sports: [Sport!]
  createdAt: Float
  id: ID
  name: String!
  slug: String!
  sportIDs: [String!]!
  updatedAt: Float
}

type Leagues {
  count: Int
  items: [League!]
  next: String
  total: Int
}

type Livestream {
  LivestreamSource: LivestreamSource
  createdAt: Float
  id: ID
  isLive: Boolean
  link: String!
  source: String!
  startDate: String
  timezone: String
  title: String!
  updatedAt: Float
}

type LivestreamSource {
  id: ID
  name: String!
}

type LockerRoom {
  Roles: UserRolesInLockerRoom
  createdAt: Float
  group: String!
  id: ID
  name: String!
  slug: String!
  updatedAt: Float
}

type LockerRooms {
  count: Int
  items: [LockerRoom!]
  next: String
  total: Int
}

type Media {
  PhotoURL: String
  isSport: Boolean
  objectID: String!
  objectType: String!
}

type Mutation {
  addLivestream(
    channelName: String!
    input: InputLivestream!
    lockerRoomID: String!
  ): MutationResult!
  addLivestreamSource(name: String!): MutationResult!
  addUserManagerialRole(
    emailAddress: String
    lockerRoomID: String!
    role: String!
    userID: String
  ): MutationResult!
  createCMSUser(input: InputCreateCMSUser!): MutationResult!
  createClub(input: InputClub!): MutationResult!
  createFanGroup(input: InputFanGroup!): MutationResult!
  createGamePartner(input: InputGamePartner!): MutationResult!
  createInHouse(input: InputInHouse!): MutationResult!
  createLeague(input: InputLeague!): MutationResult!
  createSport(input: InputSport!): MutationResult!
  createUserRoleType(name: String!): MutationResult!
  deleteClub(id: String!): MutationResult!
  deleteFanGroup(id: String!): MutationResult!
  deleteInHouse(id: String!): MutationResult!
  deleteLeague(id: String!): MutationResult!
  deleteSport(id: String!): MutationResult!
  editCMSUserAccessLevel(accessLevel: String!, id: String!): MutationResult!
  editCMSUserProfile(
    id: String!
    input: InputEditCMSUserProfile!
  ): MutationResult!
  editClub(id: String!, input: InputClub!): MutationResult!
  editFanGroup(id: String!, input: InputFanGroup!): MutationResult!
  editInHouse(id: String!, input: InputInHouse!): MutationResult!
  editLeague(id: String!, input: InputLeague!): MutationResult!
  editSport(id: String!, input: InputSport!): MutationResult!
  resendInviteCMSUser(email: String!): MutationResult!
  setFeaturedGame(objectID: String!): MutationResult!
  setLivestreamLive(id: String!): MutationResult!
}

type MutationResult {
  objectID: String
  objectType: String
  success: Boolean!
  timestamp: Float
}

type Query {
  getCMSUser(id: String, slug: String): CMSUser
  getCMSUsers: CMSUsers!
  getClub(id: String, slug: String): Club
  getClubs: Clubs!
  getFanGroup(id: String, slug: String): FanGroup
  getFanGroups: FanGroups!
  getGamePartners: GamePartners!
  getInHouse(id: String, slug: String): InHouse
  getInHouses: InHouses!
  getLeague(id: String, slug: String): League
  getLeagues: Leagues!
  getLockerRoom(id: String, slug: String): LockerRoom
  getLockerRooms: LockerRooms!
  getSport(id: String, slug: String): Sport
  getSports: Sports!
  getUser(id: String, slug: String): User
  getUsers: Users!
}

type Sport {
  Avatar: Media!
  CoverPhoto: Media!
  Icon: Media
  createdAt: Float
  id: ID
  name: String!
  slug: String!
  status: String!
  updatedAt: Float
}

type Sports {
  count: Int
  items: [Sport!]
  next: String
  total: Int
}

type User {
  Avatar: Media
  ZipCode: ZipCode
  createdAt: Float
  emailAddress: String!
  firstName: String
  id: ID
  lastName: String
  slug: String!
  uid: String!
  updatedAt: Float
  username: String!
  zipCode: String
}

type UserRole {
  User: User!
  createdAt: Float
  group: String!
  groupID: String!
  groupType: String!
  id: ID
  isPrimaryOwner: Boolean
  lockerRoomID: String!
  role: String!
  status: String!
  uid: String!
  updatedAt: Float
  userID: String!
}

type UserRolesInLockerRoom {
  Managers: [UserRole!]!
  Owners: [UserRole!]!
  Supporters: [UserRole!]!
}

type Users {
  count: Int
  items: [User!]
  next: String
  total: Int
}

type ZipCode {
  city: String!
  country: String!
  latitude: Float!
  longitude: Float!
  state: String!
  zip: String!
}
